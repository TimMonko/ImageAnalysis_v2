mutate(height = image.dims[2])
test <- exists('all.centers')
if (test == FALSE) {
all.centers <- tbl.centers
} else {
all.centers <- bind_rows(all.centers, tbl.centers)
}
}
### HERE IS WHERE WE DO THE REACTIVE STUFF YOU SILLY GOON
renderTable(head(all.centers))
head(all.centers)
all.centers
re.all.centers <- all.centers %>%
reactive){
re.all.centers <- all.centers %>%
reactive({
mutate(age = input$age)
})
?mutate_if
checkboxGroupInput("extractable", label = "Scrape info with str_extract() for...", choices = list("Genotype" = 1, "Pair" = 2, "Region" = 3, "Age" = 4, "EdU" = 5), selected = c(1,2,3))
textInput("genotype", label = "Genotype", value = 'WT|CKO')
textInput("pair", label = "Pair", value = '(?<=Pr)[:digit:]{1,2}')
textInput("region", label = "Region", value = 'S1|V1')
textInput("age", label = "Age")
textInput("edu", label = "EdU")
renderPrint(checkboxGroupInput)
checkboxGroupInput("extractable", label = "Scrape info with str_extract() for...", choices = list("Genotype" = 1, "Pair" = 2, "Region" = 3, "Age" = 4, "EdU" = 5), selected = c(1,2,3))
textInput("genotype", label = "Genotype", value = 'WT|CKO')
textInput("pair", label = "Pair", value = '(?<=Pr)[:digit:]{1,2}')
textInput("region", label = "Region", value = 'S1|V1')
textInput("age", label = "Age")
textInput("edu", label = "EdU")
renderPrint(checkboxGroupInput())
checkboxGroupInput("extractable", label = "Scrape info with str_extract() for...", choices = list("Genotype" = 1, "Pair" = 2, "Region" = 3, "Age" = 4, "EdU" = 5), selected = c(1,2,3))
textInput("genotype", label = "Genotype", value = 'WT|CKO')
textInput("pair", label = "Pair", value = '(?<=Pr)[:digit:]{1,2}')
textInput("region", label = "Region", value = 'S1|V1')
textInput("age", label = "Age")
textInput("edu", label = "EdU")
renderPrint(input$extractable)
checkboxGroupInput("extractable", label = "Scrape info with str_extract() for...", choices = list("Genotype" = 1, "Pair" = 2, "Region" = 3, "Age" = 4, "EdU" = 5), selected = c(1,2,3))
textInput("genotype", label = "Genotype", value = 'WT|CKO')
textInput("pair", label = "Pair", value = '(?<=Pr)[:digit:]{1,2}')
textInput("region", label = "Region", value = 'S1|V1')
textInput("age", label = "Age")
textInput("edu", label = "EdU")
renderPrint(input$extractable)
checkboxGroupInput("extractable", label = "Scrape info with str_extract() for...", choices = list("Genotype" = 1, "Pair" = 2, "Region" = 3, "Age" = 4, "EdU" = 5), selected = c(1,2,3))
textInput("genotype", label = "Genotype", value = 'WT|CKO')
textInput("pair", label = "Pair", value = '(?<=Pr)[:digit:]{1,2}')
textInput("region", label = "Region", value = 'S1|V1')
textInput("age", label = "Age")
textInput("edu", label = "EdU")
renderPrint(input$extractable)
?%in%
?str_detect
?str_extract
"1" %in% input$genotype
?extract
renderPrint("1" %in% input$extractable)
re.all.centers <- reactive({
all.centers %>%
mutate(genotype = str_extract(file, input$genotype))
})
re.genotype.col <- reactive({
extract(all.centers$file, "Genotype", input$genotype)
})
renderPrint(re.genotype.col())
# re.all.centers <- reactive({
#   all.centers %>%
#     {if ("1" %in% input$extractable) {mutate(genotype = str_extract(as.character(all.centers$file), input$genotype))}}
# })
# re.all.centers <- reactive({
# all.centers %>%
#   {if ("1" %in% input$extractable) mutate(genotype = str_extract(all.centers$file, input$genotype))}
# })
# re.all.centers <- reactive({
#   all.centers %>%
#     if ('1' %in% input$extractable) { mutate(genotype = str_extract(all.centers$file, input$genotype)) }
#       else { mutate(genotype = input$genotype) }
# })
### HERE IS WHERE WE DO THE REACTIVE STUFF YOU SILLY GOON
renderTable(head(re.all.centers()))
?as.string
?is.string
?string
?str
?replace_na
?names
install.packages("DT")
library(DT)
?shiny:renderDataTable
?shiny::renderDataTable
?DT::renderDataTable
?datatable
?renderDataTable
?renderDataTable
?relocate
?inputPanel
?inputPanel
?renderPlot
library(tidyverse) # Includes ggplot2, tidyr, dplyr, stringr, readr, tibble, purrr, forcats
library(svglite) # For exporting plots as .svg graphics to use as vector format
library(extrafont) # README: https://cran.r-project.org/web/packages/extrafont/README.html
#font_import(path = 'C:/Users/TimMonko/AppData/Local/Microsoft/Windows/Fonts') # for custom installed .ttf fonts
library(broom) # Tidy's up some statistical outputs
library(ggh4x)
library(MANOVA.RM)
library(rstatix)
library(ggpubr)
library(shiny) # Not needed when running as .Rmd, but when working through individual chunks it is necessary to load (the YAML header does it with runtime:shiny during .Rmd)
library(shinyjqui) # For drag and drop functions such as orderInput
library(knitr) # Helpful for some functions when not running as .Rmd as with shiny
library(DT) # Use this for rendering datatable as html output widgets (shiny:: and DT:: share renderDataTable)
extrafont::loadfonts(device = "win", quiet = TRUE)
Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.52/bin/gswin64c.exe") # Set the location for Ghostscript for pdf embedding of fonts, use embed_fonts()
`%notin%` = Negate(`%in%`) # Custom function used to define a group by what is NOT in the group
fonts()
font_import()
library(tidyverse) # Includes ggplot2, tidyr, dplyr, stringr, readr, tibble, purrr, forcats
library(svglite) # For exporting plots as .svg graphics to use as vector format
library(extrafont) # README: https://cran.r-project.org/web/packages/extrafont/README.html
#font_import(path = 'C:/Users/TimMonko/AppData/Local/Microsoft/Windows/Fonts') # for custom installed .ttf fonts
library(broom) # Tidy's up some statistical outputs
library(ggh4x)
library(MANOVA.RM)
library(rstatix)
library(ggpubr)
library(shiny) # Not needed when running as .Rmd, but when working through individual chunks it is necessary to load (the YAML header does it with runtime:shiny during .Rmd)
library(shinyjqui) # For drag and drop functions such as orderInput
library(knitr) # Helpful for some functions when not running as .Rmd as with shiny
library(DT) # Use this for rendering datatable as html output widgets (shiny:: and DT:: share renderDataTable)
extrafont::loadfonts(device = "win", quiet = TRUE)
Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.52/bin/gswin64c.exe") # Set the location for Ghostscript for pdf embedding of fonts, use embed_fonts()
`%notin%` = Negate(`%in%`) # Custom function used to define a group by what is NOT in the group
rm(list=ls())
library(tidyverse) # Includes ggplot2, tidyr, dplyr, stringr, readr, tibble, purrr, forcats
library(svglite) # For exporting plots as .svg graphics to use as vector format
library(extrafont) # README: https://cran.r-project.org/web/packages/extrafont/README.html
#font_import(path = 'C:/Users/TimMonko/AppData/Local/Microsoft/Windows/Fonts') # for custom installed .ttf fonts
library(broom) # Tidy's up some statistical outputs
library(ggh4x)
library(MANOVA.RM)
library(rstatix)
library(ggpubr)
library(shiny) # Not needed when running as .Rmd, but when working through individual chunks it is necessary to load (the YAML header does it with runtime:shiny during .Rmd)
library(shinyjqui) # For drag and drop functions such as orderInput
library(knitr) # Helpful for some functions when not running as .Rmd as with shiny
library(DT) # Use this for rendering datatable as html output widgets (shiny:: and DT:: share renderDataTable)
extrafont::loadfonts(device = "win", quiet = TRUE)
Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.52/bin/gswin64c.exe") # Set the location for Ghostscript for pdf embedding of fonts, use embed_fonts()
`%notin%` = Negate(`%in%`) # Custom function used to define a group by what is NOT in the group
library(tidyverse) # Includes ggplot2, tidyr, dplyr, stringr, readr, tibble, purrr, forcats
library(svglite) # For exporting plots as .svg graphics to use as vector format
library(extrafont) # README: https://cran.r-project.org/web/packages/extrafont/README.html
#font_import(path = 'C:/Users/TimMonko/AppData/Local/Microsoft/Windows/Fonts') # for custom installed .ttf fonts
library(broom) # Tidy's up some statistical outputs
library(ggh4x)
library(MANOVA.RM)
library(rstatix)
library(ggpubr)
library(shiny) # Not needed when running as .Rmd, but when working through individual chunks it is necessary to load (the YAML header does it with runtime:shiny during .Rmd)
library(shinyjqui) # For drag and drop functions such as orderInput
library(knitr) # Helpful for some functions when not running as .Rmd as with shiny
library(DT) # Use this for rendering datatable as html output widgets (shiny:: and DT:: share renderDataTable)
extrafont::loadfonts(device = "win", quiet = TRUE)
Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.52/bin/gswin64c.exe") # Set the location for Ghostscript for pdf embedding of fonts, use embed_fonts()
`%notin%` = Negate(`%in%`) # Custom function used to define a group by what is NOT in the group
wd.path <- getwd()
file.paths <- list.files(path = wd.path, pattern = '\\.csv$')
csv_bind <- function(wd.path = getwd(), text.pattern){
bound <- do.call(rbind,
lapply(list.files(path = wd.path, pattern = text.pattern),
function(x) read_csv(x)))
return(bound)
}
all.data <- csv_bind(text.pattern = 'centers')
wellPanel(
orderInput("z.ord", label = "Slice", items = unique(all.data$z)),
orderInput("genotype.ord", label = "Genotype", items = unique(all.data$genotype)),
orderInput("pair.ord", label = "Pair", items = unique(all.data$pair)),
orderInput("region.ord", label = "Region", items = unique(all.data$region)),
orderInput("age.ord", label = "Age", items = unique(all.data$age)),
orderInput("edu.ord", label = "EdU", items = unique(all.data$edu))
)
renderText("This value will rescale the pixel values to represent micrometers, for 10X on our microscope the value is 0.63492 (or 1pixel/1.575micrometers")
numericInput("rescale", label = "rescale px/um", value = 0.63492)
re.all.data <- reactive({
all.data %>%
mutate(z = ordered(z, levels = input$z.ord)) %>%
mutate(genotype = ordered(genotype, levels = input$genotype.ord)) %>%
mutate(pair = ordered(pair, levels = input$pair.ord)) %>%
mutate(region = ordered(region, levels = input$region.ord)) %>%
mutate(age = ordered(age, levels = input$age.ord)) %>%
mutate(edu = ordered(edu, levels = input$edu.ord)) %>%
mutate(x.abs.right = (width-x)*input$rescale) %>%
mutate(x.abs.left = x*input$rescale) %>%
mutate(x.rel.right = x/width)
})
# renderText("All Data")
# renderDT(re.all.data(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
re.file.data <- reactive({
re.all.data() %>%
group_by(file, genotype, z, pair, region) %>%
summarize(n.cells = mean(n)) # mean is not really a required function, and should be changed , but need to have a summarize function
})
#### THIS IS THE SPOT THAT IS NOT RENDERING THE PLOT -->>> WHERE IS THE PLOT?
re.file.data.wide <- reactive({
re.file.data() %>%
pivot_wider(id_cols = c(genotype, pair, region), names_from = z, values_from = n)
})
renderDT(re.file.data.wide())
renderPrint(re.file.data.wide())
# renderDT(re.file.data(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
re.pair.data <- reactive({
re.file.data() %>%
group_by(genotype, z, pair, region) %>%
summarize(n.cells.mean = mean(n.cells), n.sd.cells = sd(n.cells))
})
renderDT(re.pair.data(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
paired.t <- reactive({
re.pair.data() %>%
group_by(z, region) %>%
t_test(n.cells.mean ~ genotype, paired = TRUE) %>%
add_significance() %>%
mutate(p.signif = recode(p.signif,"ns"= "")) %>%
mutate(p = round(p, digits = 3)) %>%
mutate(p = format(p, digits = 3)) %>%
mutate(p = replace(p, p == 0, "<0.001"))
})
renderDT(paired.t(), options = list(pageLength = 5, scrollX=TRUE))
re.file.data <- reactive({
re.all.data() %>%
group_by(file, genotype, z, pair, region) %>%
summarize(n.cells = mean(n)) # mean is not really a required function, and should be changed , but need to have a summarize function
})
#### THIS IS THE SPOT THAT IS NOT RENDERING THE PLOT -->>> WHERE IS THE PLOT?
re.file.data.wide <- reactive({
re.file.data() %>%
pivot_wider(id_cols = c(genotype, pair, region), names_from = z, values_from = n)
})
# Render
renderDT(re.file.data.wide())
renderPrint(re.file.data.wide())
# renderDT(re.file.data(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
re.pair.data <- reactive({
re.file.data() %>%
group_by(genotype, z, pair, region) %>%
summarize(n.cells.mean = mean(n.cells), n.sd.cells = sd(n.cells))
})
renderDT(re.pair.data(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
paired.t <- reactive({
re.pair.data() %>%
group_by(z, region) %>%
t_test(n.cells.mean ~ genotype, paired = TRUE) %>%
add_significance() %>%
mutate(p.signif = recode(p.signif,"ns"= "")) %>%
mutate(p = round(p, digits = 3)) %>%
mutate(p = format(p, digits = 3)) %>%
mutate(p = replace(p, p == 0, "<0.001"))
})
renderDT(paired.t(), options = list(pageLength = 5, scrollX=TRUE))
# get and load ".csv" files in the working directory of the current .Rmd file
wd.path <- getwd()
file.paths <- list.files(path = wd.path, pattern = '\\.csv$')
# function binds .csv's loaded into file.paths. They are bound according to sharing a certain pattern of text (such as 'centers'). This maintains legacy saving of data variables where there was 'all_centers' and 'pair_mean' outputs, etc., from the analysis file
csv_bind <- function(wd.path = getwd(), text.pattern){
bound <- do.call(rbind,
lapply(list.files(path = wd.path, pattern = text.pattern),
function(x) read_csv(x)))
return(bound)
}
all.data <- csv_bind(text.pattern = 'centers')
wellPanel(
orderInput("z.ord", label = "Slice", items = unique(all.data$z)),
orderInput("genotype.ord", label = "Genotype", items = unique(all.data$genotype)),
orderInput("pair.ord", label = "Pair", items = unique(all.data$pair)),
orderInput("region.ord", label = "Region", items = unique(all.data$region)),
orderInput("age.ord", label = "Age", items = unique(all.data$age)),
orderInput("edu.ord", label = "EdU", items = unique(all.data$edu))
)
renderText("This value will rescale the pixel values to represent micrometers, for 10X on our microscope the value is 0.63492 (or 1pixel/1.575micrometers")
numericInput("rescale", label = "rescale px/um", value = 0.63492)
re.all.data <- reactive({
all.data %>%
mutate(z = ordered(z, levels = input$z.ord)) %>%
mutate(genotype = ordered(genotype, levels = input$genotype.ord)) %>%
mutate(pair = ordered(pair, levels = input$pair.ord)) %>%
mutate(region = ordered(region, levels = input$region.ord)) %>%
mutate(age = ordered(age, levels = input$age.ord)) %>%
mutate(edu = ordered(edu, levels = input$edu.ord)) %>%
mutate(x.abs.right = (width-x)*input$rescale) %>%
mutate(x.abs.left = x*input$rescale) %>%
mutate(x.rel.right = x/width)
})
# renderText("All Data")
# renderDT(re.all.data(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
?read_csv
re.all.data <- reactive({
all.data %>%
mutate(z = ordered(z, levels = input$z.ord)) %>%
mutate(genotype = ordered(genotype, levels = input$genotype.ord)) %>%
mutate(pair = ordered(pair, levels = input$pair.ord)) %>%
mutate(region = ordered(region, levels = input$region.ord)) %>%
mutate(age = ordered(age, levels = input$age.ord)) %>%
mutate(edu = ordered(edu, levels = input$edu.ord)) %>%
mutate(x.abs.right = (width-x)*input$rescale) %>%
mutate(x.abs.left = x*input$rescale) %>%
mutate(x.rel.right = x/width)
})
# renderText("All Data")
# renderDT(re.all.data(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
?checkboxGroupInput
?selectizeInput
?checkboxGroupInput
all.data
rm.groups <- paste0(unique(all.data$pair, all.data$region))
unique(all.data$pair)
paste0(unique(all.data$pair), unique(all.data$region))
rm.groups <- paste(unique(all.data$region), unique(all.data$pair))
rm.groups
rm.groups
rm.groups <- paste(unique(all.data$region), "Pair", unique(all.data$pair))
rm.groups
rm.groups <- paste0("Region:", unique(all.data$region), " Pr:", unique(all.data$pair))
rm.groups
rm.region <- str_extract(rm.groups, value = "(?<=Pr:)[:digit:]{1,2}")
rm.region <- str_extract(rm.groups, "(?<=Pr:)[:digit:]{1,2}")
rm.region
rm.groups <- paste0(unique(all.data$region), unique(all.data$pair))
rm.groups
rm.groups <- paste0(unique(all.data$region), "-", unique(all.data$pair))
rm.groups
?theme_classic
library(unicycles)
?theme
?geom_jitter
ignette("ggplot2-specs")
vignette("ggplot2-specs")
?ggsave
?renderPlot
?renderPlot
?ggsave
?ggsave
library(tidyverse) # Includes ggplot2, tidyr, dplyr, stringr, readr, tibble, purrr, forcats
library(svglite) # For exporting plots as .svg graphics to use as vector format
library(extrafont) # README: https://cran.r-project.org/web/packages/extrafont/README.html
#font_import(path = 'C:/Users/TimMonko/AppData/Local/Microsoft/Windows/Fonts') # for custom installed .ttf fonts
library(broom) # Tidy's up some statistical outputs
library(ggh4x)
library(MANOVA.RM)
library(rstatix)
library(ggpubr)
library(shiny) # Not needed when running as .Rmd, but when working through individual chunks it is necessary to load (the YAML header does it with runtime:shiny during .Rmd)
library(shinyjqui) # For drag and drop functions such as orderInput
library(knitr) # Helpful for some functions when not running as .Rmd as with shiny
library(DT) # Use this for rendering datatable as html output widgets (shiny:: and DT:: share renderDataTable)
extrafont::loadfonts(device = "win", quiet = TRUE)
Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.52/bin/gswin64c.exe") # Set the location for Ghostscript for pdf embedding of fonts, use embed_fonts()
`%notin%` = Negate(`%in%`) # Custom function used to define a group by what is NOT in the group
?ggsave
re.file.data <- reactive({
re.all.data() %>%
group_by(file, genotype, z, pair, region) %>%
summarize(n.cells = mean(n)) # mean is not really a required function, and should be changed , but need to have a summarize function
})
#### THIS IS THE SPOT THAT IS NOT RENDERING THE PLOT -->>> WHERE IS THE PLOT?
re.file.data.wide <- reactive({
re.file.data() %>%
pivot_wider(id_cols = c(genotype, pair, region), names_from = z, values_from = n)
})
renderDT(re.file.data.wide())
renderPrint(re.file.data.wide())
# renderDT(re.file.data.wide(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
re.file.data <- reactive({
re.all.data() %>%
group_by(file, genotype, z, pair, region) %>%
summarize(n.cells = mean(n)) # mean is not really a required function, and should be changed , but need to have a summarize function
})
# This table is not showing
re.file.data.wide <- reactive({
re.file.data() %>%
pivot_wider(id_cols = c(genotype, pair, region), names_from = z, values_from = n)
})
renderDT(re.file.data.wide())
renderPrint(re.file.data.wide())
# renderDT(re.file.data.wide(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
library(tidyverse) # Includes ggplot2, tidyr, dplyr, stringr, readr, tibble, purrr, forcats
library(svglite) # For exporting plots as .svg graphics to use as vector format
library(extrafont) # README: https://cran.r-project.org/web/packages/extrafont/README.html
#font_import(path = 'C:/Users/TimMonko/AppData/Local/Microsoft/Windows/Fonts') # for custom installed .ttf fonts
library(broom) # Tidy's up some statistical outputs
library(ggh4x)
library(MANOVA.RM)
library(rstatix)
library(ggpubr)
library(shiny) # Not needed when running as .Rmd, but when working through individual chunks it is necessary to load (the YAML header does it with runtime:shiny during .Rmd)
library(shinyjqui) # For drag and drop functions such as orderInput
library(knitr) # Helpful for some functions when not running as .Rmd as with shiny
library(DT) # Use this for rendering datatable as html output widgets (shiny:: and DT:: share renderDataTable)
extrafont::loadfonts(device = "win", quiet = TRUE)
Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.52/bin/gswin64c.exe") # Set the location for Ghostscript for pdf embedding of fonts, use embed_fonts()
`%notin%` = Negate(`%in%`) # Custom function used to define a group by what is NOT in the group
# get and load ".csv" files in the working directory of the current .Rmd file
wd.path <- getwd()
file.paths <- list.files(path = wd.path, pattern = '\\.csv$')
# function binds .csv's loaded into file.paths. They are bound according to sharing a certain pattern of text (such as 'centers'). This maintains legacy saving of data variables where there was 'all_centers' and 'pair_mean' outputs, etc., from the analysis file
csv_bind <- function(wd.path = getwd(), text.pattern){
bound <- do.call(rbind,
lapply(list.files(path = wd.path, pattern = text.pattern),
function(x) read_csv(x, col_names = TRUE, show_col_types = FALSE)))
return(bound)
}
all.data <- csv_bind(text.pattern = 'centers')
rm.groups <- paste0(unique(all.data$region), "-", unique(all.data$pair))
wellPanel(
orderInput("z.ord", label = "Slice", items = unique(all.data$z)),
orderInput("genotype.ord", label = "Genotype", items = unique(all.data$genotype)),
orderInput("pair.ord", label = "Pair", items = unique(all.data$pair)),
orderInput("region.ord", label = "Region", items = unique(all.data$region)),
orderInput("age.ord", label = "Age", items = unique(all.data$age)),
orderInput("edu.ord", label = "EdU", items = unique(all.data$edu)),
selectizeInput("outlier.rm", label = "Outliers to remove", choices = rm.groups, multiple = TRUE)
)
renderText("This value will rescale the pixel values to represent micrometers, for 10X on our microscope the value is 0.63492 (or 1pixel/1.575micrometers")
numericInput("rescale", label = "rescale px/um", value = 0.63492)
# Uses wellPanel inputs from factoring_data to organize the table and have consistent column naming, then displays the table
re.all.data <- reactive({
all.data %>%
mutate(z = ordered(z, levels = input$z.ord)) %>%
mutate(genotype = ordered(genotype, levels = input$genotype.ord)) %>%
mutate(pair = ordered(pair, levels = input$pair.ord)) %>%
mutate(region = ordered(region, levels = input$region.ord)) %>%
mutate(region.pair = paste0(region, "-", pair)) %>%
mutate(age = ordered(age, levels = input$age.ord)) %>%
mutate(edu = ordered(edu, levels = input$edu.ord)) %>%
mutate(x.abs.right = (width-x)*input$rescale) %>%
mutate(x.abs.left = x*input$rescale) %>%
mutate(x.rel.right = x/width) %>%
filter(region.pair %notin% input$outlier.rm)
})
renderText("All Data")
renderDT(re.all.data(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
re.file.data <- reactive({
re.all.data() %>%
group_by(file, genotype, z, pair, region) %>%
summarize(n.cells = mean(n)) # mean is not really a required function, and should be changed , but need to have a summarize function
})
# This table is not showing
re.file.data.wide <- reactive({
re.file.data() %>%
pivot_wider(id_cols = c(genotype, pair, region), names_from = z, values_from = n)
})
renderDT(re.file.data.wide())
renderPrint(re.file.data.wide())
# renderDT(re.file.data.wide(), filter="top", class = 'nowrap', options = list(pageLength = 5, scrollX=TRUE))
?pivot_wider
?get_summary_stats
?outlier
?identify outliers
?identify_outliers
?get_summary_stats
# Full summary statistics
data("ToothGrowth")
ToothGrowth %>% get_summary_stats(len)
# Summary statistics of grouped data
# Show only common summary
ToothGrowth %>%
group_by(dose, supp) %>%
get_summary_stats(len, type = "common")
# Robust summary statistics
ToothGrowth %>% get_summary_stats(len, type = "robust")
# Five number summary statistics
ToothGrowth %>% get_summary_stats(len, type = "five_number")
# Compute only mean and sd
ToothGrowth %>% get_summary_stats(len, type = "mean_sd")
# Compute full summary statistics but show only mean, sd, median, iqr
ToothGrowth %>%
get_summary_stats(len, show = c("mean", "sd", "median", "iqr"))
?identify_outliers
?pivot_wider
?varSelectizeInput
mtcars
mtcars[[mpg]]
mtcars[mpg]
mtcars$mpg
?summarize
# prep the product column names (also acting as row numbers)
df <-
df %>%
mutate(prod_grp = paste0("v", row_number(), "v", row_number() + 2))
# converting data to tidy format and pairing columns to be multiplied together.
tidy_df <-
df %>%
gather(column, value, -prod_grp) %>%
mutate(column = as.numeric(sub("v", "", column)),
pair = column - 2) %>%
mutate(pair = if_else(pair < 1, pair + 2, pair))
# summarize the products for each column
prod_df <-
tidy_df %>%
group_by(prod_grp, pair) %>%
summarize(val = prod(value)) %>%
spread(prod_grp, val) %>%
mutate(pair = paste0("v", pair, "v", pair + 2)) %>%
rename(prod_grp = pair)
# put the original frame and summary frames together
final_df <-
df %>%
left_join(prod_df) %>%
select(-prod_grp)
?summarize
